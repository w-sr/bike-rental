type Reservation {
  _id: ID!
  user: User!
  bike: Bike!
  start_date: String!
  end_date: String!
  status: String!
}

input ReservationCreateInput {
  bike: String!
  start_date: String!
  end_date: String!
}

input ReservationCancelInput {
  user: String!
  bike: String!
  rate: String
}

input ReservationsInput {
  user: String
  bike: String
  first_name: String
  last_name: String
  email: String
  model: String
  location: String
  color: String
  rate: String
  start_date: String
  end_date: String
  page: Int!
  pageSize: Int!
}

type ReservationPayload {
  items: [Reservation]
  count: Int
}

type Query {
  reservation(_id: String!): Reservation
  reservations(filters: ReservationsInput): ReservationPayload
}

type Mutation {
  createReservation(input: ReservationCreateInput!): Reservation
  cancelReservation(input: ReservationCancelInput!): Reservation
}
