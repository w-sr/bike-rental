type Bike {
  id: ID!
  model: String!
  color: String!
  location: String!
  rate: String!
  reserved_user_id: String
  reserved: Boolean!
  createdAt: String!
  updatedAt: String!
}

input BikeCreateInput {
  model: String!
  color: String!
  location: String!
}

input BikeUpdateInput {
  model: String
  color: String
  location: String
  rate: String
  reserved: Boolean
}

input BikeInputFilter {
  model: String
  color: String
  location: String
  rate: String
}

type Payload {
  success: Boolean!
}

type Query {
  bike(id: String!): Bike
  bikes(input: BikeInputFilter): [Bike]
}

type Mutation {
  createBike(input: BikeCreateInput!): Bike
  deleteBike(id: String!): Bike
  updateBike(id: String!, input: BikeUpdateInput): Bike
}
