type Bike {
  _id: ID!
  model: String!
  color: String!
  location: String!
  rate: String!
  createdAt: String!
  updatedAt: String!
}

input BikeCreateInput {
  model: String!
  color: String!
  location: String!
}

input BikeUpdateInput {
  model: String
  color: String
  location: String
  reserved: Boolean
}

input BikeInput {
  id: String
  start_date: String
  end_date: String
}

input BikeInputFilter {
  user: String
  model: String
  color: String
  location: String
  rate: String
  start_date: String
  end_date: String
  page: Int!
  pageSize: Int!
}

type BikePayload {
  bike: Bike
  available: Boolean
}

type BikesPayload {
  items: [Bike]
  count: Int
}

type Query {
  bike(input: BikeInput!): BikePayload
  bikes(filters: BikeInputFilter): BikesPayload
}

type Mutation {
  createBike(input: BikeCreateInput!): Bike
  deleteBike(_id: String!): Bike
  updateBike(_id: String!, input: BikeUpdateInput): Bike
}
