type User {
  id: ID!
  first_name: String!
  last_name: String!
  email: String!
  role: String!
  createdAt: String!
  updatedAt: String!
}

input UserCreateInput {
  first_name: String!
  last_name: String!
  email: String!
  role: String!
}

input UserUpdateInput {
  first_name: String
  last_name: String
  email: String
  role: String
}

input LoginInput {
  email: String!
  password: String!
}

input RegisterInput {
  first_name: String!
  last_name: String!
  email: String!
  password: String!
}

type AuthPayload {
  user: User
  token: String
}

type Query {
  me: User
  user(id: String!): User
  users: [User]
}

type Mutation {
  login(data: LoginInput!): AuthPayload
  register(data: RegisterInput!): AuthPayload
  createUser(input: UserCreateInput!): User
  deleteUser(id: String!): User
  updateUser(id: String!, input: UserUpdateInput): User
}
